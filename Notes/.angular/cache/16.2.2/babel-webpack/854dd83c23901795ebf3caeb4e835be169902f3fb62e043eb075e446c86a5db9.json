{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class DateSearchPipe {\n  transform(value, ...args) {\n    //  return full value of all notes if search arguement is blank\n    if (args[0] == '') {\n      return value;\n    }\n    // initalizing search result array to add values to return to user\n    let searchResult = [];\n    // loop through notes array to check if date matches the search input\n    for (let i = 0; i < value.length; i++) {\n      // loop through date values for each note object in the array\n      for (let j = 0; j < value[i].dataCreated.length; j++) {\n        // if date is included in the search inquiry, add it to the searchResult array to return to user\n        if (value[i].dataCreated.includes(args)) {\n          searchResult.push(value[i]);\n          break;\n        }\n      }\n    }\n    // return only the notes that match the search inqury\n    return searchResult;\n  }\n}\n_class = DateSearchPipe;\n_class.ɵfac = function DateSearchPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"dateSearch\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["DateSearchPipe","transform","value","args","searchResult","i","length","j","dataCreated","includes","push","pure"],"sources":["/Users/katrinathielen/Desktop/Angular Project 1/Notes/src/app/pipes/date-search.pipe.ts"],"sourcesContent":["import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'dateSearch'\n  // dataSearch:dataCreated to use pipe\n})\nexport class DateSearchPipe implements PipeTransform {\n  transform(value: any, ...args: any[]): any {\n    //  return full value of all notes if search arguement is blank\n     if(args[0]==''){\n      return value;\n    }\n    // initalizing search result array to add values to return to user\n    let searchResult = [];\n  // loop through notes array to check if date matches the search input\n    for(let i=0; i<value.length; i++){\n      // loop through date values for each note object in the array\n      for(let j=0; j<value[i].dataCreated.length; j++){\n        // if date is included in the search inquiry, add it to the searchResult array to return to user\n        if(value[i].dataCreated.includes(args)){\n          searchResult.push(value[i]);\n          break;\n        }\n      }\n    }\n  // return only the notes that match the search inqury\n  return searchResult;\n  }\n}"],"mappings":";;AAOA,OAAM,MAAOA,cAAc;EACzBC,SAASA,CAACC,KAAU,EAAE,GAAGC,IAAW;IAClC;IACC,IAAGA,IAAI,CAAC,CAAC,CAAC,IAAE,EAAE,EAAC;MACd,OAAOD,KAAK;;IAEd;IACA,IAAIE,YAAY,GAAG,EAAE;IACvB;IACE,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAC;MAC/B;MACA,KAAI,IAAIE,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACL,KAAK,CAACG,CAAC,CAAC,CAACG,WAAW,CAACF,MAAM,EAAEC,CAAC,EAAE,EAAC;QAC9C;QACA,IAAGL,KAAK,CAACG,CAAC,CAAC,CAACG,WAAW,CAACC,QAAQ,CAACN,IAAI,CAAC,EAAC;UACrCC,YAAY,CAACM,IAAI,CAACR,KAAK,CAACG,CAAC,CAAC,CAAC;UAC3B;;;;IAIR;IACA,OAAOD,YAAY;EACnB;;SArBWJ,cAAc;;mBAAdA,MAAc;AAAA;;;QAAdA,MAAc;EAAAW,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}