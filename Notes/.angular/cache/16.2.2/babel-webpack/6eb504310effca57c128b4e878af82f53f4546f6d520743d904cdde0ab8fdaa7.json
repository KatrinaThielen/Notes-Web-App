{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/helper.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../header/header.component\";\nexport class LoginComponent {\n  constructor(server, router) {\n    this.server = server;\n    this.router = router;\n  }\n  onLogin(login) {\n    let input = {\n      username: login.controls.username.value,\n      password: login.controls.password.value\n    };\n    let verified = false;\n    this.server.login().subscribe(data => {\n      for (let i = 0; i < data.length; i++) {\n        // if password is matched with USER in data.json, verified set to true\n        if (input.username === data[i].username && input.password === data[i].password) {\n          verified = true;\n        }\n      }\n      // if verified is true, send user to /home page \n      if (verified) {\n        this.router.navigate(['home']);\n      }\n      // if verified is false, send user an error alert message\n      else {\n        alert('Error! User does not exist or password is not correct. Please try again.');\n      }\n    });\n  }\n}\n_class = LoginComponent;\n_class.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HelperService), i0.ɵɵdirectiveInject(i2.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-login\"]],\n  decls: 30,\n  vars: 1,\n  consts: [[1, \"container\", \"text-center\"], [1, \"form-signin\", 3, \"ngSubmit\"], [\"loginForm\", \"ngForm\"], [1, \"form-signin-heading\"], [1, \"row\", \"g-3\", \"justify-content-center\"], [1, \"col-auto\"], [\"for\", \"username\", 1, \"col-form-label\"], [\"ngModel\", \"\", \"name\", \"username\", \"type\", \"text\", \"id\", \"username\", \"required\", \"\", \"autofocus\", \"\", 1, \"form-control\"], [\"username\", \"ngModel\"], [\"for\", \"password\", 1, \"col-form-label\"], [\"ngModel\", \"\", \"name\", \"password\", \"type\", \"password\", \"id\", \"password\", \"aria-describedby\", \"passwordHelpInline\", \"required\", \"\", \"autofocus\", \"\", 1, \"form-control\"], [\"password\", \"ngModel\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"text-center\", \"form-text\"], [\"routerLink\", \"/register\", \"routerLinkActive\", \"active\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r3 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelement(0, \"app-header\")(1, \"br\");\n      i0.ɵɵelementStart(2, \"div\", 0)(3, \"form\", 1, 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n        i0.ɵɵrestoreView(_r3);\n        const _r0 = i0.ɵɵreference(4);\n        return i0.ɵɵresetView(ctx.onLogin(_r0));\n      });\n      i0.ɵɵelementStart(5, \"h1\", 3);\n      i0.ɵɵtext(6, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelementStart(8, \"div\", 4)(9, \"div\", 5)(10, \"label\", 6);\n      i0.ɵɵtext(11, \"Username\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 5);\n      i0.ɵɵelement(13, \"input\", 7, 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 4)(16, \"div\", 5)(17, \"label\", 9);\n      i0.ɵɵtext(18, \"Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 5);\n      i0.ɵɵelement(20, \"input\", 10, 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵelementStart(23, \"button\", 12);\n      i0.ɵɵtext(24, \"Login\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(25, \"br\");\n      i0.ɵɵelementStart(26, \"div\", 13);\n      i0.ɵɵtext(27, \" Don't have an account? \");\n      i0.ɵɵelementStart(28, \"a\", 14);\n      i0.ɵɵtext(29, \"Sign up here!\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(4);\n      i0.ɵɵadvance(23);\n      i0.ɵɵproperty(\"disabled\", _r0.form.invalid);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm, i2.RouterLink, i2.RouterLinkActive, i4.HeaderComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["LoginComponent","constructor","server","router","onLogin","login","input","username","controls","value","password","verified","subscribe","data","i","length","navigate","alert","i0","ɵɵdirectiveInject","i1","HelperService","i2","Router","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelement","ɵɵelementStart","ɵɵlistener","LoginComponent_Template_form_ngSubmit_3_listener","ɵɵrestoreView","_r3","_r0","ɵɵreference","ɵɵresetView","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","form","invalid"],"sources":["/Users/katrinathielen/Desktop/Angular Project 1/Notes/src/app/login/login.component.ts","/Users/katrinathielen/Desktop/Angular Project 1/Notes/src/app/login/login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HelperService } from '../services/helper.service';\nimport { Route, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  constructor(private server: HelperService, private router: Router){}\n\nonLogin(login: any){\n \n  let input = {\n    username: login.controls.username.value,\n    password: login.controls.password.value,\n  }\n\n  let verified = false;\n\n  this.server.login().subscribe((data)=>{\n    for(let i=0; i<data.length; i++){\n      // if password is matched with USER in data.json, verified set to true\n      if(input.username === data[i].username && input.password === data[i].password){\n        verified = true;\n      } \n    }\n    // if verified is true, send user to /home page \n    if(verified){\n      this.router.navigate(['home']);\n    } \n    // if verified is false, send user an error alert message\n    else { \n      alert('Error! User does not exist or password is not correct. Please try again.')\n    } \n  }); \n}\n}\n","<app-header></app-header>\n<br>\n<div class=\"container text-center\">\n    <!-- reactive form to intake user login called 'form-signin' -->\n    <form class=\"form-signin\" #loginForm=\"ngForm\" (ngSubmit)=\"onLogin(loginForm)\">\n    <h1 class=\"form-signin-heading\">Login</h1>\n    <br>\n      <div class=\"row g-3 justify-content-center\">\n          <div class=\"col-auto\">\n            <label for=\"username\" class=\"col-form-label\">Username</label>\n          </div>\n          <div class=\"col-auto\">\n            <!-- username input required -->\n            <input ngModel #username=\"ngModel\" name=\"username\" type=\"text\" id=\"username\" class=\"form-control\" required autofocus>\n          </div>\n      </div>\n\n      <div class=\"row g-3 justify-content-center\">\n        <div class=\"col-auto\">\n          <label for=\"password\" class=\"col-form-label\">Password</label>\n        </div>\n        <div class=\"col-auto\">\n          <!-- password input required -->\n          <input ngModel #password=\"ngModel\" name=\"password\" type=\"password\" id=\"password\" class=\"form-control\" aria-describedby=\"passwordHelpInline\" required autofocus>\n        </div>\n      </div>\n      <br>\n      <!-- submit button for 'form-signin' is disabled when fields above are not entered -->\n      <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loginForm.form.invalid\">Login</button>\n    </form>\n</div>\n<!-- user navigation access to register form to input a new entry for login -->\n<br><div class=\"text-center form-text\"> Don't have an account? <a routerLink=\"/register\" routerLinkActive=\"active\">Sign up here!</a></div>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}