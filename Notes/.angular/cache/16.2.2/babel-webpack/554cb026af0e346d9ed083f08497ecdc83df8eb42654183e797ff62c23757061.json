{"ast":null,"code":"var _class;\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HelperService {\n  constructor(http) {\n    this.http = http;\n  }\n  // Edit the note object in data.json\n  modifiedNote(query) {\n    this.http.put('http://localhost:3000/notes/' + query.id, query).subscribe(data => query.id);\n  }\n  // Add the note object in data.json to favorites\n  addToFavorites(query) {\n    this.http.put('http://localhost:3000/notes/' + query.id, query).subscribe(data => query.id);\n    // console.log('updating the selected note #' + this.query.id);\n    // alert('updated and added note to favorites. navigating to home.')\n  }\n  // Remove the note object in data.json from favorites\n  removeFromFavorites(query) {\n    this.http.put('http://localhost:3000/notes/' + query.id, query).subscribe(data => query.id);\n  }\n  // Delete the note object in data.json\n  deleteNote(query) {\n    return this.http.delete('http://localhost:3000/notes/' + query.id).subscribe();\n  }\n  // Set selected note\n  setSelectedNote(obj) {\n    this.selected = obj;\n    console.log('this is the object setted');\n  }\n  // Get retrieved selected note\n  getSelectedNote() {\n    console.log('object being retrieved');\n    return this.selected;\n  }\n  // Retrieve notes from JSON\n  getNotes() {\n    return this.http.get('http://localhost:3000/notes');\n  }\n  // Add new note entry to JSON data.json\n  addNote(newNoteInput) {\n    return this.http.post('http://localhost:3000/notes', newNoteInput).pipe(catchError(this.handleErrors));\n  }\n  // Add new user entry to JSON data.json\n  register(user) {\n    return this.http.post('http://localhost:3000/users', user).pipe(catchError(this.handleErrors));\n  }\n  // Check if username and password are in users array in data.json\n  login() {\n    return this.http.get('http://localhost:3000/users');\n  }\n  // For the errors\n  handleErrors(error) {\n    return throwError(error);\n  }\n}\n_class = HelperService;\n_class.ɵfac = function HelperService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","HelperService","constructor","http","modifiedNote","query","put","id","subscribe","data","addToFavorites","removeFromFavorites","deleteNote","delete","setSelectedNote","obj","selected","console","log","getSelectedNote","getNotes","get","addNote","newNoteInput","post","pipe","handleErrors","register","user","login","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/katrinathielen/Desktop/Angular Project 1/Notes/src/app/services/helper.service.ts"],"sourcesContent":["import { query } from '@angular/animations';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperService {\n\n  selected: any;\n\n  constructor(private http: HttpClient) { }\n  \n  // Edit the note object in data.json\n  modifiedNote(query: any){\n    this.http.put('http://localhost:3000/notes/'+ query.id, query)\n    .subscribe(data => query.id)\n  }\n\n  // Add the note object in data.json to favorites\n  addToFavorites(query: any){\n    this.http.put('http://localhost:3000/notes/'+ query.id, query)\n    .subscribe(data => query.id)\n    // console.log('updating the selected note #' + this.query.id);\n    // alert('updated and added note to favorites. navigating to home.')\n  }\n\n  // Remove the note object in data.json from favorites\n  removeFromFavorites(query: any){\n    this.http.put<any>('http://localhost:3000/notes/'+ query.id, query)\n    .subscribe(data => query.id);\n  }\n\n  // Delete the note object in data.json\n  deleteNote(query: any){\n    return this.http.delete<any>('http://localhost:3000/notes/'+ query.id)\n    .subscribe()\n  }\n\n  // Set selected note\n  setSelectedNote(obj: any){\n    this.selected = obj;\n    console.log('this is the object setted')\n  }\n\n  // Get retrieved selected note\n  getSelectedNote(){\n    console.log('object being retrieved')\n    return this.selected;\n  }\n\n  // Retrieve notes from JSON\n  getNotes(): Observable<any>{\n    return this.http.get('http://localhost:3000/notes')\n  }\n\n  // Add new note entry to JSON data.json\n  addNote(newNoteInput: any): Observable<any>{\n  return this.http.post('http://localhost:3000/notes', newNoteInput).pipe(\n    catchError(this.handleErrors)\n    )\n  }\n\n  // Add new user entry to JSON data.json\n  register(user: { username: any; password: any}): Observable<any>{\n    return this.http.post('http://localhost:3000/users',user).pipe(\n      catchError(this.handleErrors)\n    )\n  }\n  // Check if username and password are in users array in data.json\n  login(): Observable<any>{\n    return this.http.get('http://localhost:3000/users');\n  }\n\n  // For the errors\n  handleErrors(error: any){\n    return throwError(error)\n  }\n\n}"],"mappings":";AAGA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAKzD,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExC;EACAC,YAAYA,CAACC,KAAU;IACrB,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,8BAA8B,GAAED,KAAK,CAACE,EAAE,EAAEF,KAAK,CAAC,CAC7DG,SAAS,CAACC,IAAI,IAAIJ,KAAK,CAACE,EAAE,CAAC;EAC9B;EAEA;EACAG,cAAcA,CAACL,KAAU;IACvB,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,8BAA8B,GAAED,KAAK,CAACE,EAAE,EAAEF,KAAK,CAAC,CAC7DG,SAAS,CAACC,IAAI,IAAIJ,KAAK,CAACE,EAAE,CAAC;IAC5B;IACA;EACF;EAEA;EACAI,mBAAmBA,CAACN,KAAU;IAC5B,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,8BAA8B,GAAED,KAAK,CAACE,EAAE,EAAEF,KAAK,CAAC,CAClEG,SAAS,CAACC,IAAI,IAAIJ,KAAK,CAACE,EAAE,CAAC;EAC9B;EAEA;EACAK,UAAUA,CAACP,KAAU;IACnB,OAAO,IAAI,CAACF,IAAI,CAACU,MAAM,CAAM,8BAA8B,GAAER,KAAK,CAACE,EAAE,CAAC,CACrEC,SAAS,EAAE;EACd;EAEA;EACAM,eAAeA,CAACC,GAAQ;IACtB,IAAI,CAACC,QAAQ,GAAGD,GAAG;IACnBE,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;EAC1C;EAEA;EACAC,eAAeA,CAAA;IACbF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,OAAO,IAAI,CAACF,QAAQ;EACtB;EAEA;EACAI,QAAQA,CAAA;IACN,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAC,6BAA6B,CAAC;EACrD;EAEA;EACAC,OAAOA,CAACC,YAAiB;IACzB,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CAAC,6BAA6B,EAAED,YAAY,CAAC,CAACE,IAAI,CACrE1B,UAAU,CAAC,IAAI,CAAC2B,YAAY,CAAC,CAC5B;EACH;EAEA;EACAC,QAAQA,CAACC,IAAqC;IAC5C,OAAO,IAAI,CAACzB,IAAI,CAACqB,IAAI,CAAC,6BAA6B,EAACI,IAAI,CAAC,CAACH,IAAI,CAC5D1B,UAAU,CAAC,IAAI,CAAC2B,YAAY,CAAC,CAC9B;EACH;EACA;EACAG,KAAKA,CAAA;IACH,OAAO,IAAI,CAAC1B,IAAI,CAACkB,GAAG,CAAC,6BAA6B,CAAC;EACrD;EAEA;EACAK,YAAYA,CAACI,KAAU;IACrB,OAAO9B,UAAU,CAAC8B,KAAK,CAAC;EAC1B;;SAtEW7B,aAAa;;mBAAbA,MAAa,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAbjC,MAAa;EAAAkC,OAAA,EAAblC,MAAa,CAAAmC,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}