{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/helper.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../header/header.component\";\nfunction RegisterComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 16);\n    i0.ɵɵtext(1, \" valid username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"span\", 17);\n    i0.ɵɵtext(2, \" password is required \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegisterComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"span\", 17);\n    i0.ɵɵtext(2, \" Confirmed password is required!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class RegisterComponent {\n  constructor(router, server, fb) {\n    this.router = router;\n    this.server = server;\n    this.fb = fb;\n    this.registerForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validators: this.confirmValidator()\n    });\n  }\n  ngOnInit() {}\n  // confirmValidator applied to confirmPassword input field to check if password and confirmPassword are the same value\n  confirmValidator() {\n    return control => {\n      var error;\n      // if password value and confirmPassword value are not equivalent, make error true\n      if (control.value.password != control.value.confirmPassword) {\n        error = {\n          \"matchingError\": true\n        };\n      }\n      return error;\n    };\n  }\n  // submit formGroup value formatted to be input into data.json file\n  onSubmit(register) {\n    let user = {\n      username: this.registerForm.get('username')?.value,\n      password: this.registerForm.get('password')?.value\n    };\n    this.server.register(user).subscribe(query => {\n      if (query) {\n        this.router.navigate(['login']);\n      } else {\n        alert('Unable to successfully register user.');\n      }\n    });\n  }\n}\n_class = RegisterComponent;\n_class.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.HelperService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-register\"]],\n  decls: 37,\n  vars: 5,\n  consts: [[1, \"container\", \"text-center\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-signin-heading\"], [1, \"row\", \"g-3\", \"justify-content-center\"], [1, \"col-auto\"], [\"for\", \"username\", 1, \"col-form-label\"], [\"formControlName\", \"username\", 1, \"form-control\"], [\"class\", \"form-text is-invalid\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"col-form-label\"], [\"ngModel\", \"\", \"formControlName\", \"password\", \"type\", \"password\", 1, \"form-control\"], [\"class\", \"col-auto\", 4, \"ngIf\"], [\"for\", \"confirmPassword\", 1, \"col-form-label\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"text-center\", \"form-text\"], [\"routerLink\", \"/login\", \"routerLinkActive\", \"active\"], [1, \"form-text\", \"is-invalid\"], [1, \"form-text\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-header\")(1, \"br\");\n      i0.ɵɵelementStart(2, \"div\", 0)(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit(ctx.registerForm);\n      });\n      i0.ɵɵelementStart(4, \"h1\", 2);\n      i0.ɵɵtext(5, \"Register User Account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"br\");\n      i0.ɵɵelementStart(7, \"div\", 3)(8, \"div\", 4)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Username\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 4);\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 4);\n      i0.ɵɵtemplate(14, RegisterComponent_span_14_Template, 2, 0, \"span\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 3)(16, \"div\", 4)(17, \"label\", 8);\n      i0.ɵɵtext(18, \"Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 4);\n      i0.ɵɵelement(20, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(21, RegisterComponent_div_21_Template, 3, 0, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 3)(23, \"div\", 4)(24, \"label\", 11);\n      i0.ɵɵtext(25, \"Confirm\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"div\", 4);\n      i0.ɵɵelement(27, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(28, RegisterComponent_div_28_Template, 3, 0, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(29, \"br\");\n      i0.ɵɵelementStart(30, \"button\", 13);\n      i0.ɵɵtext(31, \"Register Now!\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(32, \"br\");\n      i0.ɵɵelementStart(33, \"div\", 14);\n      i0.ɵɵtext(34, \"Already have an account? \");\n      i0.ɵɵelementStart(35, \"a\", 15);\n      i0.ɵɵtext(36, \"Login here!\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.invalid));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.invalid));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_3_0.invalid));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i1.RouterLink, i1.RouterLinkActive, i5.HeaderComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RegisterComponent","constructor","router","server","fb","registerForm","group","username","required","password","confirmPassword","validators","confirmValidator","ngOnInit","control","error","value","onSubmit","register","user","get","subscribe","query","navigate","alert","ɵɵdirectiveInject","i1","Router","i2","HelperService","i3","FormBuilder","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_3_listener","ɵɵtemplate","RegisterComponent_span_14_Template","RegisterComponent_div_21_Template","RegisterComponent_div_28_Template","ɵɵadvance","ɵɵproperty","tmp_1_0","touched","invalid","tmp_2_0","tmp_3_0"],"sources":["/Users/katrinathielen/Desktop/Angular Project 1/Notes/src/app/register/register.component.ts","/Users/katrinathielen/Desktop/Angular Project 1/Notes/src/app/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HelperService } from '../services/helper.service';\nimport { AbstractControl, FormBuilder, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor(private router: Router, private server: HelperService, private fb: FormBuilder){}\n\n  ngOnInit(): void {}\n\n  registerForm = this.fb.group({\n    username:['',[Validators.required]],\n    password:['', Validators.required],\n    confirmPassword:['', Validators.required]\n    },{\n    validators: this.confirmValidator()\n  })\n  // confirmValidator applied to confirmPassword input field to check if password and confirmPassword are the same value\n  confirmValidator(): ValidatorFn{\n    return(control:AbstractControl): ValidationErrors =>{\n      var error: any;\n      // if password value and confirmPassword value are not equivalent, make error true\n      if(control.value.password != control.value.confirmPassword){\n        error = {\"matchingError\": true}\n      }\n      return error;\n    }\n  }\n  // submit formGroup value formatted to be input into data.json file\n  onSubmit(register: any){\n    let user = {\n      username: this.registerForm.get('username')?.value,\n      password: this.registerForm.get('password')?.value,\n    }\n    this.server.register(user).subscribe(query=>{\n      if (query){\n        this.router.navigate(['login']);\n      }\n      else {\n        alert('Unable to successfully register user.')\n      }\n    })\n  }\n}\n\n","<app-header></app-header>\n<br>\n<div class=\"container text-center\">\n  <!-- formGroup to intake user login called 'registerForm' -->\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit(registerForm)\">\n      <h1 class=\"form-signin-heading\">Register User Account</h1>\n      <br>\n      <div class=\"row g-3 justify-content-center\">\n        <div class=\"col-auto\">\n            <label for=\"username\" class=\"col-form-label\">Username</label>\n          </div>\n        <div class=\"col-auto\">\n          <!-- username input required -->\n          <input formControlName=\"username\" class=\"form-control\" >\n        </div>\n        <div class=\"col-auto\">\n          <!-- username error message shown to user if username field is 'touched' and 'invalid'/empty -->\n          <span  class=\"form-text is-invalid\" *ngIf=\"registerForm.get('username')?.touched && registerForm.get('username')?.invalid\">\n            valid username is required\n          </span>\n        </div>\n      </div>\n      <div class=\"row g-3 justify-content-center\">\n        <div class=\"col-auto\">\n          <label for=\"password\" class=\"col-form-label\">Password</label>\n        </div>\n        <div class=\"col-auto\">\n          <!-- password input required -->\n          <input ngModel formControlName=\"password\" type=\"password\" class=\"form-control\">\n        </div>\n        <div class=\"col-auto\" *ngIf=\"registerForm.get('password')?.touched && registerForm.get('password')?.invalid\">\n          <!-- password error message shown to user if password field is 'touched' and 'invalid'/empty -->\n          <span class=\"form-text\">\n            password is required\n          </span>\n        </div>\n      </div>\n      <div class=\"row g-3 justify-content-center\">\n        <div class=\"col-auto\">\n          <label for=\"confirmPassword\" class=\"col-form-label\">Confirm</label>\n        </div>\n        <div class=\"col-auto\">\n          <!-- confirmPassword input required -->\n          <input formControlName=\"confirmPassword\" type=\"password\" class=\"form-control\">\n        </div>\n        <!-- confirmPassword error shown to user if confirmPassword is 'touched' and 'invalid'/empty -->\n        <div class=\"col-auto\" *ngIf=\"registerForm.get('confirmPassword')?.touched && registerForm.get('confirmPassword')?.invalid\">\n          <span class=\"form-text\"> Confirmed password is required!</span>\n        </div>\n      </div>\n    <br>\n    <!-- submit button for 'registerForm' is disabled when fields above are not entered -->\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"registerForm.invalid\" >Register Now!</button>\n  </form>\n</div>\n\n\n\n\n\n<br><div class=\"text-center form-text\">Already have an account? <a routerLink=\"/login\" routerLinkActive=\"active\">Login here!</a></div>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}